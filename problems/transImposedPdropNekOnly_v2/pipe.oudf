// Boundary conditions
/* inflow 1, outflow 2, wall 3 */

#include <iostream>


void velocityDirichletConditions(bcData *bc)
{
}

void pressureDirichletConditions(bcData *bc)
{
// set pressure at inlet
   if(bc->id == 1) bc->p = 8.5546049;
}


void scalarDirichletConditions(bcData *bc)
{
  dfloat wd, Re, darcy, utau, sigk, kmax, yplus, yk, tke, tau, r;

//  dfloat rho    = 9.9756100e02;  // pull from wrk array
//  dfloat mueLam = 8.8871000e-04; // pull from wrk array
  dfloat R      = 0.05;
  dfloat xi     = bc->x;
  dfloat yi     = bc->y;
  dfloat zi     = bc->z;

//  dfloat u_in = 0.26726486; // Re=30,000
//  dfloat u_in = bc->wrk[bc->idM + 1*bc->fieldOffset];
//  dfloat u_in = 0.17817657;   // Re=20,000
//  dfloat u_in = 0.1;   // Re=20,000
//  Re = rho*u_in*2*R/mueLam;

  Re = 10000;

  wd = R - sqrt((yi*yi+zi*zi));
  r  = sqrt((yi*yi+zi*zi));

//  darcy = 0.316/(pow(Re,0.25));
//  utau  = sqrt(darcy/8.0);
//  sigk  = 0.6;
//  kmax  = 2.5*utau*utau;
//  yplus = max(wd*utau*Re,1.0e-6);
//  yk    = 30.0;
//
//  tke   = 2.15 * kmax*exp(-pow(log10(yplus/yk),2.0)/(2.0*sigk*sigk));
//  tau   = 2.15 * ((R/2)/(5*utau))*(1 - pow(r/R,2));

  // Darcy friction factor
  darcy = 0.316 / pow(Re, 0.25);

  // friction velocity
  utau  = sqrt(darcy / 8.0);

  sigk  = 0.6;
  kmax  = 2.5 * utau * utau;
  yplus = max(wd * utau * Re, 1.0e-6);
  yk    = 30.0;
  tke   = kmax * exp(-pow(log10(yplus / yk), 2.0) / (2.0 * sigk * sigk));
  tau   = 0.072 * (wd * wd) * Re / 6.0;
  tke   = min(tke, 7.6e-3);
  tau   = min(tau, 1.3);

  bc->s = 0;
  if (bc->scalarId == 0) bc->s = 1.0;
  if((bc->scalarId == 1)&&(bc->id == 1)) bc->s = tke;
  if((bc->scalarId == 2)&&(bc->id == 1)) bc->s = tau;
}

