// Boundary conditions
/* inflow 1, outflow 2, wall 3 */

#include <iostream>


void velocityDirichletConditions(bcData *bc)
{
  dfloat u_sam = bc->wrk[bc->idM];// area-corrected velocity from SAM

  bc->u = u_sam;
  bc->v = 0.0;
  bc->w = 0.0;
}

void scalarDirichletConditions(bcData *bc)
{
  dfloat wd, Re, darcy, utau, sigk, kmax, yplus, yk, tke, tau, r;

// TODO, Re function of inlet velocity viscosity diameter etc
  dfloat u_sam  = bc->wrk[bc->idM];// area-corrected velocity from SAM

  dfloat rho    = 9.9756100e02;  // pull from wrk array
  dfloat mueLam = 8.8871000e-04; // pull from wrk array
  dfloat R      = 0.05;
  dfloat xi     = bc->x;
  dfloat yi     = bc->y;
  dfloat zi     = bc->z;

  Re = rho*u_sam*2*R/mueLam;

  wd    = R - sqrt((yi*yi+zi*zi));
  r     = sqrt((yi*yi+zi*zi));
  darcy = 0.316/(pow(Re,0.25));
  utau  = sqrt(darcy/8.0);
  sigk  = 0.6;
  kmax  = 2.5*utau*utau;
  yplus = max(wd*utau*Re,1.0e-6);
  yk    = 30.0;

  dfloat f_increase = 2.15;

  tke   = f_increase * kmax*exp(-pow(log10(yplus/yk),2.0)/(2.0*sigk*sigk));

  tau   = f_increase * ((R/2)/(5*utau))*(1 - pow(r/R,2));

  bc->s = 0;
  if (bc->scalarId == 0) bc->s = 1.0;
  if((bc->scalarId == 1)&&(bc->id == 1)) bc->s = tke;
  if((bc->scalarId == 2)&&(bc->id == 1)) bc->s = tau;
}

